=begin pod

=TITLE class Method

=SUBTITLE Member function

    class Method is Routine { }

A type for methods. To create a method outside a L<class
definition|/language/typesystem#Methods>, use the declarators C<my> and C<method>:

    my $m = method ($invocant: $param) {
        say "$invocant: '$param'";
    }
    "greeting".$m("hello");         # greeting: 'hello'

    <a b c>.&(my method (List:D:){dd self; self}).say;
    # OUTPUT«("a", "b", "c")␤(a b c)␤»

Methods will ignore extra named arguments where other types of C<Routine> will
throw at runtime. Extra arguments will be forwarded by C<nextsame> and friends.

    class A {
        multi method m(:$a, :$b) { say "2 nameds" }
    }

    class B is A {
        method m(:$a) { say "1 named"; nextsame }
    }
    B.m( :1a, :2b );
    # OUTPUT«1 named␤2 nameds␤»

=end pod
