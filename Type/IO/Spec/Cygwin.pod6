=begin pod

=TITLE class IO::Spec::Cygwin

=SUBTITLE Platform specific operations on file and directory paths for Cygwin

    class IO::Spec::QNX is IO::Spec { }

This sub-class of L<IO::Spec> will be available from the
C<$*SPEC> variable for a perl running on C<Cygwin> .

B<NOTE:> the C<IO::Spec::*> classes provide low-level path operations. Unless
you're creating your own high-level path manipulation routines, you don't
need to use C<IO::Spec::*>. Use L«C<IO::Path>|/type/IO::Path» instead.

=head1 Methods

=head2 method abs2rel

    method abs2rel(IO::Path:D $path, IO::Path:D $base = $*CWD --> Str:D)

Returns a string that represents C<$path>, but relative to C<$base> path.
Both C<$path> and C<$base> may be relative paths C<$bar> defaults to C<$*CWD>.
Uses L«C<IO::Spec::Win32>|/type/IO::Spec::Win32»'s semantics.

=head2 method canonpath

    method canonpath(Str() $path, :$parent --> Str:D)

Returns a string that is a canonical representation of C<$path>. If C<:$parent>
is set to true, will also clean up references to parent directories. B<NOTE:>
the routine does not access the filesystem.

    IO::Spec::Cygwin.canonpath(｢C:\foo\\..\bar\..\ber｣).say;
    # OUTPUT: «C:/foo/../bar/../ber␤»

    IO::Spec::Cygwin.canonpath("foo///./../bar/../ber").say;
    # OUTPUT: «foo/../bar/../ber␤»

    IO::Spec::Cygwin.canonpath("foo///./../bar/../ber", :parent).say;
    # OUTPUT: «ber␤»

=head2 method tmpdir

Defined as:

        method tmpdir(--> IO::Path:D)

Attempts to locate a system's temporary directory by checking several typical directories and environmental variables. Uses currect directory if no suitable directories are found.

=end pod

# vim: expandtab shiftwidth=4 ft=perl6
