=begin pod

=TITLE class Sub

=SUBTITLE Subroutine

    class Sub is Routine { }

A type for subroutines. Subs are created with the C<sub> declarator keyword

    my $s = sub ($a, $b) { $a + $b };
    say $s.WHAT;        # (Sub)
    say $s(2, 5);       # 7

=head1 Traits
X<|trait_mod (declarator)>

A Trait is a sub that is applied at compile time to various objects like
classes, routines or L<containers|/language/phasers#index-entry-will_trait>. It
is declared with the C<trait_mod> declarator followed by a colon and a string
literal containing the name of the trait. A single positional parameter defines
the type of the object that the trait is applied to. A single named argument
defines the secondary name and may carry arguments when the trait is called.
Traits are a special grammar category and are allowed to be places after most
language object names or parameter lists.

    say 'start';
    multi sub trait_mod:<is>(Sub $s, :$foo){
        say "⟨is foo⟩ has been called with ⟨$foo⟩ on {$s.WHICH}";
    }
    sub bar() is foo<oi‽> {
        say 'bar has been called'
    }
    bar();
    # OUTPUT«⟨is foo⟩ has been called with ⟨oi‽⟩ on Sub|47563000␤start␤bar has been called␤»

=end pod
