=begin pod

=TITLE class Array

=SUBTITLE Sequence of itemized values

    class Array is List { ... }

An C<Array> is a L<List> which forces all its elements to be
scalar containers, which means you can assign to array elements.

=head1 Methods

=head2 routine pop

Defined as:

    multi sub    pop(Array:D )
    multi method pop(Array:D:)

Usage:

    pop ARRAY
    ARRAY.pop

Removes and returns the last item from the array. Fails for an empty array.

Example:

    > my @foo = <a b>;
    a b
    > @foo.pop;
    b
    > pop @foo
    a
    > pop @foo
    Element popped from empty list

=head2 routine push

Defined as:

    multi sub    push(Array:D, **@values) returns Array:D
    multi method push(Array:D: **@values) returns Array:D

Usage:

    push ARRAY, VALUES
    ARRAY.push(VALUES)
    ARRAY.push: VALUES

Adds the C<@values> to the end of the array, and returns the modified list.
Fails for infinite arrays.

Example:

    my @foo = <a b c>;
    @foo.push: 1, 3 ... 11;
    say @foo;                   # a b c 1 3 5 7 9 11

=head2 routine shift

Defined as:

    multi sub    shift(Array:D )
    multi method shift(Array:D:)

Usage:

    shift ARRAY
    ARRAY.shift

Removes and returns the first item from the array. Fails for an empty arrays.

Example:

    my @foo = <a b>;
    say @foo.shift;     # a
    say @foo.shift;     # b
    say @foo.shift;     # Element shifted from empty list

=head2 routine unshift

Defined as:

    multi sub    unshift(Array:D, **@values) returns Array:D
    multi method unshift(Array:D: **@values) returns Array:D

Usage:

    unshift ARRAY, VALUES
    ARRAY.unshift(VALUES)
    ARRAY.unshift: VALUES

Adds the C<@values> to the start of the array, and returns the modified array.
Fails if C<@values> is infinite.

Example:

    my @foo = <a b c>;
    @foo.unshift: 1, 3 ... 11;
    say @foo;                   # 1 3 5 7 9 11 a b c

=end pod
