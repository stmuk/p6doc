=begin pod

=TITLE Traps to avoid

=SUBTITLE Traps to avoid when getting started with Perl 6

When learning a programming language, possibly with the background of being
familiar with another programming language, there are always some things
that can surprise you and might cost valuable time in debugging and
discovery.

This document aims to show common misconceptions.

During the making of Perl 6 great pains were taken to get rid of warts in
the syntax.  When you whack one wart, though, sometimes another pops up.  So
a lot of time was spent finding the minimum number of warts or trying to put
them where they would rarely be seen.  Because of this, Perl 6's warts are
in different places than you may expect them to be when coming from another
language.

=head1 Objects

=head2 Assigning to attributes

Newcomers often think that, because attributes with accessors are declared
as C<has $.x>, they can assign to C<$.x> inside the class. That's not the
case.

For example

    use v6;
    class Point {
        has $.x;
        has $.y;
        method double {
            $.x *= 2;   # WRONG
            $.y *= 2;   # WRONG
            self;
        }
    }

    say Point.new(x => 1, y => -2).double.x

dies with

    Cannot modify an immutable Int

in the first line marked with C<# WRONG>, because C<$.x>, short for C<$(
self.x )>, is a call to a read-only accessor.

The syntax C<has $.x> is short for something like C<has $!x; method x() {
$!x }>, so the actual attribute is called C<$!x>, and a read-only accessor
method is automatically generated.

Thus the correct way to write method C<double> is

        method double {
            $!x *= 2;
            $!y *= 2;
            self;
        }

which operates on the attributes directly.

=head2 BUILD prevents automatic attribute initialization from constructor arguments

When you define your own C<BUILD> submethod, you must take care of
initializing all attributes yourself. For example

    use v6;
    class A {
        has $.x;
        has $.y;
        submethod BUILD {
            $!y = 18;
        }
    }

    say A.new(x => 42).x;       # Any

leaves C<$!x> uninitialized, because the custom C<BUILD> doesn't initialize
it.

One possible remedy is to explicitly initialize the attribute in C<BUILD>:

        submethod BUILD(:$x) {
            $!y = 18;
            $!x := $x;
        }

which can be shortened to:

        submethod BUILD(:$!x) {
            $!y = 18;
        }

Another, more general approach is to leave C<BUILD> alone, and hook into the
C<BUILDALL> mechanism instead:

    use v6;
    class A {
        has $.x;
        has $.y;
        method BUILDALL(|c) {
            nextsame;
            $!y = 18;
        }
    }

    say A.new(x => 42).x;       # 42

(Note that C<BUILDALL> is a method, not a submethod. That's because by
default, there is only one such method per class hierarchy, whereas C<BUILD>
is explicitly called per class. Which also explains why you need the
C<nextsame> inside C<BUIDLALL>, but not inside C<BUILD>).

=head1 Regexes

=head2 Whitespace in Regexes does not match literally

    $ perl6 -e "say 'a b' ~~ /a b/"
    False

Whitespace in regexes is, by default, considered an optional filler without
semantics, just like in the rest of the Perl 6 language.

Ways to match whitespace:

=item C<\s> to match any one whitespace, C<\s+> to match at least one
=item C<' '> (a blank in quotes) to match a single blank
=item C<\t>, C<\n> for specific whitespace (tab, newline)
=item C<\h>, C<\v> for horizontal, vertical whitespace
=item C<<.ws>>, a built-in rule for whitespace that oftentimes does what
      you actually want it to do
=item with C<m:s/a b/> or C<m:sigspace/a b/>, the blank in the regexes
      matches arbitrary whitespace

=head1 Captures

=head2 Containers versus values in a Capture

Beginners might expect a variable in a C<Capture> to supply its current
value when that C<Capture> is later used.  For example:

    $ perl6 -e 'my $a = 2; say join ',', ($a, ++$a)'
    3,3

Here the C<Capture> contained the B<container> pointed to by C<$a> and the
B<value> of the result of the expression C<++$a>.  Since the C<Capture> must
be reified before C<&say> can use it, the C<++$a> may happen before C<&say>
looks inside the container in C<$a> and so it may already be incremented.

Instead, use an expression that produces a value when you want a value.

    $ perl6 -e 'my $a = 2; say join ',', (+$a, ++$a)'
    2,3

=head1 Arrays

=head2 Number of elements in an array when assigning the empty array

Assigning an empty array to an array saves the empty array as an item in the
array.  This is why the number of elements will turn out to be 1 instead of
zero as might be expected by the unwary.

    my @array = [];    # assigns empty array as an item in @array
    say @array.elems;  #-> 1

Whereas querying the number of elements of the empty array directly returns
zero as expected:

    say [].elems;      #-> 0

This can be more clearly seen by calling the C<.perl> method on the object:

    my @array = [];
    say @array.perl;   #-> Array.new([])  # an array containing an empty array

in contrast to:

    my @array = ();
    say @array.perl;   #-> Array.new()    # a truly empty array

Note that this is I<also> the behaviour in Perl 5:

    perl -E "say scalar(my @array = [])"  #-> 1
    perl -E "say scalar(my @array = ())"  #-> 0

=head2 Referencing the last element of an array

In Perl 5 one could reference the last element of an array by asking for the
"-1th" element of the array, e.g.:

    my @array = qw{victor alice bob charlie eve};
    say @array[-1];    #->  eve

In Perl 6 it is not possible to use negative subscripts, however the same is
achieved by actually using a function, namely C<*-1>.  Thus accessing the
last element of an array becomes:

    my @array = qw{victor alice bob charlie eve};
    say @array[*-1];   #->  eve

=head1 Strings

=head2 Capitalizing a string

In Perl 5 one could capitalize a string by using the C<ucfirst> function

    say ucfirst "alice"; #-> Alice

The C<ucfirst> function does not exist in Perl 6; one needs to use the
C<tc> method:

    say "alice".tc;      #-> Alice

which is equivalent to

    say tc "alice";      #-> Alice

Here, C<tc> means "title case".

=end pod

# vim: expandtab shiftwidth=4 ft=perl6
