=begin pod :tag<perl6>

=TITLE Input/Output The Definitive Guide

=SUBTITLE Correctly use Perl 6 IO

=head1 The Basics

The vast majority of common IO work is done by the L<IO::Path> type. If you
want to read from or write to a file in some form or shape, this is the class
you want. It abstracts away the details of file handles (or "file descriptors")
and so you mostly don't even have to think about them.

Behind the scenes, L<IO::Path> works with L<IO::Handle>; a class which you
can use directly if you need a bit more control than what L<IO::Path>
provides. When working with other processes, e.g. via L<Proc> or L<Proc::Async>
types, you'll also be dealing with a I<subclass> of L<IO::Handle>: the
L<IO::Pipe>.

Lastly, you have the L<IO::CatHandle>, as well as L<IO::Spec> and its
subclasses, that you'll rarely, if ever, use directly. These classes give you
advanced features, such as operating on multiple files as one handle, or
low-level path manipulations.

Along with all these classes, Perl 6 provides several subroutines that provide
let you indirectly work with these classes. These come in handy if you like
functional programming style or in Perl 6 one liners.

While L<IO::Socket> and its subclasses also have to do with Input and Output,
this guide does not cover them.

=head1 Navigating Paths

=head2 What's an IO::Path Anyway?

To represent paths to either files or directories, use L<IO::Path> type.
The simplest way to obtain an object of that type is to coerce a L<Str> by
calling L«C<.IO>|/routine/IO» method on it:

    say 'my-file.txt'.IO; # OUTPUT: «"my-file.txt".IO␤»

It may seem like something is missing here—there is no volume or absolute
path involved—but that information is actually present in the object. You can
see it by using L«C<.perl>|/routine/perl» method:

    say 'my-file.txt'.IO.perl;
    # OUTPUT: «IO::Path.new("my-file.txt", :SPEC(IO::Spec::Unix), :CWD("/home/camelia"))␤»

The two extra attributes—C<SPEC> and C<CWD>—specify what type of operating
system semantics the path should use as well as the "current working directory"
for the path, i.e. if it's a relative path, then it's relative to that
directory.

This means that regardless of how you made one, an L<IO::Path> object
technically always refers to an absolute path. This is why its
L«C<.absolute>|/routine/absolute» and L«C<.relative>|/routine/relative»
methods return L<Str> objects and they are the correct way to stringify a path.

However, don't be in a rush to stringify anything. Pass paths around as
L<IO::Path|/type/IO::Path> objects. All the routines that operate on paths
can handle them, so there's no need to convert them.

=head1 The Wrong Way To Do Things

This section describes how NOT to do Perl 6 IO.

=head2 Leave $*SPEC Alone

You may have heard of L«C<$*SPEC>|/language/variables#Dynamic_variables» and
seen some code or books show its usage for splitting and joining path fragments.
Some of the routine names it provides may even look familiar to what you've
used in other languages.

However, unless you're writing your own IO framework,
you almost ever need to use L«C<$*SPEC>|/language/variables#Dynamic_variables»
directly. L«C<$*SPEC>|/language/variables#Dynamic_variables» provides low-level
stuff and its use will not only make your code tough to read, you'll likely
introduce security issues (e.g. null characters)!

The L«C<IO::Path>|/type/IO::Path» type is the workhorse of Perl 6 world. It
caters to all the path manipulation needs as well as provides shortcut routines
that let you avoid dealing with file handles. Use that instead of the
L«C<$*SPEC>|/language/variables#Dynamic_variables» stuff.

Tip: you can join path parts with C</> and feed them to
L«C<IO::Path>|/type/IO::Path»'s routines; they'll still do The Right Thing™ with
them, regardless of the operating system.

=for code :skip-test
# WRONG!! TOO MUCH WORK!
my $fh = open $*SPEC.catpath: '', 'foo/bar', $file;
my $data = $fh.slurp;
$fh.close;

# RIGHT! Use IO::Path to do all the dirty work
my $data = 'foo/bar'.IO.add($file).slurp;

=head2 Stringifying IO::Path

Don't use C<.Str> method to stringify L«C<IO::Path>|/type/IO::Path» objects,
unless you just want to display them somewhere for information purposes or
something. The C<.Str> method returns whatever the basic path string the
L«C<IO::Path>|/type/IO::Path» was instantiated with. It doesn't consider the
value of L«C<$.CWD> attribute|/type/IO::Path#attribute_CWD». For example, this
code is broken:

=for code :skip-test
# WRONG!! .Str DOES NOT USE $.CWD!
my $path = 'foo'.IO;
chdir 'bar';
run <tar -cvvf archive.tar>, ~$path;

The L«C<chdir>|/routine/chdir» call changed the value of the current directory,
but the C<$path> we created is relative to the directory before that change.

However, the L«C<IO::Path>|/type/IO::Path» object I<does> know what directory
it's relative to. We just need to use L«C<.absolute>|/routine/absolute» or
L«C<.relative>|/routine/relative» to stringify the object. Both routines return
a L«C<Str>|/type/Str» object; they only differ in whether the result is an
absolute or relative path. So, we can fix our code like this:

=for code :skip-test
# RIGHT!! .absolute does consider the value of $.CWD!
my $path = 'foo'.IO;
chdir 'bar';
run <tar -cvvf archive.tar>, $path.absolute;
# Also good:
run <tar -cvvf archive.tar>, $path.relative;

=head2 Be mindful of $*CWD

While usually out of view, every L«C<IO::Path>|/type/IO::Path» object, by
default, uses the current value of
L«C<$*CWD>|/language/variables#Dynamic_variables» to set its
L«C<$.CWD> attribute|/type/IO::Path#attribute_CWD». This means there are two
things to pay attention to.

=head3 temp the $*CWD

This code is a mistake:

=for code :skip-test
# WRONG!!
my $*CWD = "foo".IO;

The C<my $*CWD> made L«C<$*CWD>|/language/variables#Dynamic_variables»
undefined. The L«C<.IO>|/routine/IO» coercer
then goes ahead and sets the L«C<$.CWD> attribute|/type/IO::Path#attribute_CWD»
of the path its creating to the stringified version of the undefined C<$*CWD>;
an empty string.

The correct way to perform this operation is use
L«C<temp>|/routine/temp» instead of C<my>. It'll localize the effect of changes
to L«C<$*CWD>|/language/variables#Dynamic_variables», just like C<my> would,
but it won't make it undefined, so the L«C<.IO>|/routine/IO» coercer will still
get the correct old value:

=for code :skip-test
temp $*CWD = "foo".IO;

Better yet, if you want to perform some code in localized
L«C<$*CWD>|/language/variables#Dynamic_variables», use the
L«C<indir> routine|/routine/indir» for that purpose.

=end pod

# vim: expandtab shiftwidth=4 ft=perl6
